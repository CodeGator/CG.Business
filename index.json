{
  "api/CG.Business.Builders.BuilderBase.html": {
    "href": "api/CG.Business.Builders.BuilderBase.html",
    "title": "Class BuilderBase",
    "keywords": "Class BuilderBase This class is a default implementation of the IBuilder interface. Inheritance System.Object BuilderBase Implements IBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Builders Assembly : CG.Business.dll Syntax public abstract class BuilderBase : IBuilder Properties ServiceCollection This property contains a reference to a service collection. Declaration public IServiceCollection ServiceCollection { get; set; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Implements IBuilder"
  },
  "api/CG.Business.Builders.html": {
    "href": "api/CG.Business.Builders.html",
    "title": "Namespace CG.Business.Builders",
    "keywords": "Namespace CG.Business.Builders Classes BuilderBase This class is a default implementation of the IBuilder interface. Interfaces IBuilder This interface represents an object that builds up other object types, at runtime."
  },
  "api/CG.Business.Builders.IBuilder.html": {
    "href": "api/CG.Business.Builders.IBuilder.html",
    "title": "Interface IBuilder",
    "keywords": "Interface IBuilder This interface represents an object that builds up other object types, at runtime. Namespace : CG.Business.Builders Assembly : CG.Business.dll Syntax public interface IBuilder Properties ServiceCollection This property contains a reference to a service collection. Declaration IServiceCollection ServiceCollection { get; set; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/CG.Business.BusinessException.html": {
    "href": "api/CG.Business.BusinessException.html",
    "title": "Class BusinessException",
    "keywords": "Class BusinessException This class represents a business related exception. Inheritance System.Object System.Exception BusinessException RepositoryException ServiceException StoreException StrategyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business Assembly : CG.Business.dll Syntax [Serializable] public class BusinessException : Exception, ISerializable Constructors BusinessException() This constructor creates a new instance of the BusinessException class. Declaration public BusinessException() BusinessException(SerializationInfo, StreamingContext) This constructor creates a new instance of the BusinessException class. Declaration public BusinessException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. BusinessException(String) This constructor creates a new instance of the BusinessException class. Declaration public BusinessException(string message) Parameters Type Name Description System.String message The message to use for the exception. BusinessException(String, Exception) This constructor creates a new instance of the BusinessException class. Declaration public BusinessException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Business.html": {
    "href": "api/CG.Business.html",
    "title": "Namespace CG.Business",
    "keywords": "Namespace CG.Business Classes BusinessException This class represents a business related exception."
  },
  "api/CG.Business.Models.html": {
    "href": "api/CG.Business.Models.html",
    "title": "Namespace CG.Business.Models",
    "keywords": "Namespace CG.Business.Models Classes ModelBase This class represents a base implmentation of a business model. ModelBase<TKey> This class represents a base implmentation of a business model."
  },
  "api/CG.Business.Models.ModelBase.html": {
    "href": "api/CG.Business.Models.ModelBase.html",
    "title": "Class ModelBase",
    "keywords": "Class ModelBase This class represents a base implmentation of a business model. Inheritance System.Object CG.DataAnnotations.ValidatableObject ModelBase ModelBase<TKey> Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Models Assembly : CG.Business.dll Syntax public class ModelBase : ValidatableObject, IValidatableObject Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Models.ModelBase-1.html": {
    "href": "api/CG.Business.Models.ModelBase-1.html",
    "title": "Class ModelBase<TKey>",
    "keywords": "Class ModelBase<TKey> This class represents a base implmentation of a business model. Inheritance System.Object CG.DataAnnotations.ValidatableObject ModelBase ModelBase<TKey> Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business.Models Assembly : CG.Business.dll Syntax public class ModelBase<TKey> : ModelBase, IValidatableObject Type Parameters Name Description TKey The type of associated model key. Remarks The idea, with this class, is to create a model base that contains a model key, which is a unique value that is irrespective of any other identifiers that happen to be part of the associated database. Of course, this means storing an extra key. If that's an issue then don't use this version of ModelBase<TKey> Properties Key This property contains a unique identifier for the model. Declaration [Key] public TKey Key { get; set; } Property Value Type Description TKey Methods Equals(Object) This method is overriden in order to determine equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The model to compare with. Returns Type Description System.Boolean True if the objects are equal; false otherwise. Overrides System.Object.Equals(System.Object) GetHashCode() This method is overridden in order to generate a unique hash code for the model. Declaration public override int GetHashCode() Returns Type Description System.Int32 An integer hash code that represents the model. Overrides System.Object.GetHashCode() ToString() This method returns a string that represents the current model. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString() Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Repositories.CrudRepositoryBase-2.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-2.html",
    "title": "Class CrudRepositoryBase<TModel, TKey>",
    "keywords": "Class CrudRepositoryBase<TModel, TKey> This class is a default implementation of the ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase RepositoryBase CrudRepositoryBase<TModel, TKey> CrudRepositoryBase<TOptions, TModel, TKey> Implements ICrudRepository <TModel, TKey> IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class CrudRepositoryBase<TModel, TKey> : RepositoryBase, ICrudRepository<TModel, TKey>, IRepository, IDisposable where TModel : ModelBase<TKey> Type Parameters Name Description TModel The model type associated with the repository. TKey The key type associated with the model. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration public abstract Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object. Declaration public abstract IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration public abstract Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration public abstract Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudRepository<TModel, TKey> IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.CrudRepositoryBase-3.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-3.html",
    "title": "Class CrudRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class CrudRepositoryBase<TOptions, TModel, TKey> This class is a default implementation of the ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase RepositoryBase CrudRepositoryBase <TModel, TKey> CrudRepositoryBase<TOptions, TModel, TKey> CrudRepositoryBase<TOptions, TEntity, TModel, TKey> Implements ICrudRepository <TModel, TKey> IRepository System.IDisposable Inherited Members CrudRepositoryBase<TModel, TKey>.AsQueryable() CrudRepositoryBase<TModel, TKey>.AddAsync(TModel, CancellationToken) CrudRepositoryBase<TModel, TKey>.UpdateAsync(TModel, CancellationToken) CrudRepositoryBase<TModel, TKey>.DeleteAsync(TModel, CancellationToken) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class CrudRepositoryBase<TOptions, TModel, TKey> : CrudRepositoryBase<TModel, TKey>, ICrudRepository<TModel, TKey>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : ModelBase<TKey> Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. TKey The key type associated with the model. Constructors CrudRepositoryBase(TOptions) This constructor creates a new instance of the CrudRepositoryBase<TOptions, TModel, TKey> class. Declaration protected CrudRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Properties Options This property contains options for the repository. Declaration protected TOptions Options { get; } Property Value Type Description TOptions Implements ICrudRepository<TModel, TKey> IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.CrudRepositoryBase-4.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-4.html",
    "title": "Class CrudRepositoryBase<TOptions, TEntity, TModel, TKey>",
    "keywords": "Class CrudRepositoryBase<TOptions, TEntity, TModel, TKey> This class is an implementation of the ICrudRepository<TModel, TKey> interface that adds an extra type parameter for an entity. Inheritance System.Object CG.DisposableBase RepositoryBase CrudRepositoryBase <TModel, TKey> CrudRepositoryBase <TOptions, TModel, TKey> CrudRepositoryBase<TOptions, TEntity, TModel, TKey> Implements ICrudRepository <TModel, TKey> IRepository System.IDisposable Inherited Members CrudRepositoryBase<TOptions, TModel, TKey>.Options CrudRepositoryBase<TModel, TKey>.AsQueryable() CrudRepositoryBase<TModel, TKey>.AddAsync(TModel, CancellationToken) CrudRepositoryBase<TModel, TKey>.UpdateAsync(TModel, CancellationToken) CrudRepositoryBase<TModel, TKey>.DeleteAsync(TModel, CancellationToken) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class CrudRepositoryBase<TOptions, TEntity, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TEntity : class where TModel : ModelBase<TKey> Type Parameters Name Description TOptions The options type associated with the repository. TEntity The entity type associated with the repository. TModel The model type associated with the repository. TKey The key type associated with the model. Constructors CrudRepositoryBase(TOptions) This constructor creates a new instance of the CrudRepositoryBase<TOptions, TEntity, TModel, TKey> class. Declaration protected CrudRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods ToEntity(TModel) This method is called to convert a model to an entity. Declaration protected abstract TEntity ToEntity(TModel source) Parameters Type Name Description TModel source The object to be converted. Returns Type Description TEntity A converted entity. ToModel(TEntity) This method is called to convert an entity to a model. Declaration protected abstract TModel ToModel(TEntity source) Parameters Type Name Description TEntity source The object to be converted. Returns Type Description TModel A converted model. Implements ICrudRepository<TModel, TKey> IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.html": {
    "href": "api/CG.Business.Repositories.html",
    "title": "Namespace CG.Business.Repositories",
    "keywords": "Namespace CG.Business.Repositories Classes CrudRepositoryBase<TModel, TKey> This class is a default implementation of the ICrudRepository<TModel, TKey> interface. CrudRepositoryBase<TOptions, TModel, TKey> This class is a default implementation of the ICrudRepository<TModel, TKey> interface. CrudRepositoryBase<TOptions, TEntity, TModel, TKey> This class is an implementation of the ICrudRepository<TModel, TKey> interface that adds an extra type parameter for an entity. RepositoryBase This class represents a base implementation of the IRepository inteface. RepositoryBase<TOptions> This class represents a base implementation of the IRepository interface. RepositoryBase<TEntity, TModel> This class represents a base implementation of the IRepository interface. RepositoryBase<TOptions, TEntity, TModel> This class represents a base implementation of the IRepository interface. RepositoryException This class represents a repository related exception. Interfaces ICrudRepository<TModel, TKey> This interface represents a repository type that includes simple CRUD operations and queries through the use of the LINQ System.Linq.IQueryable<T> . type. IRepository This interface represents an object that manages low-level data operations - typically to and from a database."
  },
  "api/CG.Business.Repositories.ICrudRepository-2.html": {
    "href": "api/CG.Business.Repositories.ICrudRepository-2.html",
    "title": "Interface ICrudRepository<TModel, TKey>",
    "keywords": "Interface ICrudRepository<TModel, TKey> This interface represents a repository type that includes simple CRUD operations and queries through the use of the LINQ System.Linq.IQueryable<T> . type. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public interface ICrudRepository<TModel, TKey> : IRepository, IDisposable where TModel : ModelBase<TKey> Type Parameters Name Description TModel TKey Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object from the repository. Declaration IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object Remarks The idea, with this method, is to expose the internals of the underlying data store directly to the caller. I realize that means the abstraction is leaking implementation details. But, because of the way LINQ works, it's also the simplest way of doing business without forcing everyone who uses this type to jump through hoops trying to simultaneously hide, and expose, those very same details. So yes, this abstraction is leakier than a $2 rowboat in a hurricane, but, it's also usable without forcing layers of additional code onto everyone that, ultimately, will probably also leak in ways we wish it wouldn't. LINQ is a flexible tool we all love to use, but, it's also the culprit here. If we use LINQ for queries (as I'm doing her), then we can live with the benefits of that decision. Of course, it also means we have to live with the consequences of that decision ... An alternative to this type of repository is the RepositoryBase type, and it's variants. They all lend themselves quite nicely to the use of ADO for creating highly performant query methods that don't leak implementation details. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object."
  },
  "api/CG.Business.Repositories.IRepository.html": {
    "href": "api/CG.Business.Repositories.IRepository.html",
    "title": "Interface IRepository",
    "keywords": "Interface IRepository This interface represents an object that manages low-level data operations - typically to and from a database. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public interface IRepository : IDisposable"
  },
  "api/CG.Business.Repositories.Options.html": {
    "href": "api/CG.Business.Repositories.Options.html",
    "title": "Namespace CG.Business.Repositories.Options",
    "keywords": "Namespace CG.Business.Repositories.Options Classes RepositoryOptions This class represents configuration options for a repository."
  },
  "api/CG.Business.Repositories.Options.RepositoryOptions.html": {
    "href": "api/CG.Business.Repositories.Options.RepositoryOptions.html",
    "title": "Class RepositoryOptions",
    "keywords": "Class RepositoryOptions This class represents configuration options for a repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase RepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories.Options Assembly : CG.Business.dll Syntax public class RepositoryOptions : OptionsBase, IValidatableObject Fields SectionName This constant represents the configuration section root for repository options. This means options for repositories should be bound at a point just above the Repositories node, in the configuration. Declaration public const string SectionName = \"Repositories\" Field Value Type Description System.String Properties Assembly This property contains the optional name of the assembly that contains the repository strategy. Declaration public string Assembly { get; set; } Property Value Type Description System.String Strategy This property contains the name of the configured repository strategy. Declaration [Required(ErrorMessageResourceName = \"RepositoryOptions_Strategy\", ErrorMessageResourceType = typeof(Resources))] public string Strategy { get; set; } Property Value Type Description System.String Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Repositories.RepositoryBase.html": {
    "href": "api/CG.Business.Repositories.RepositoryBase.html",
    "title": "Class RepositoryBase",
    "keywords": "Class RepositoryBase This class represents a base implementation of the IRepository inteface. Inheritance System.Object CG.DisposableBase RepositoryBase CrudRepositoryBase<TModel, TKey> RepositoryBase<TOptions> RepositoryBase<TEntity, TModel> Implements IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class RepositoryBase : DisposableBase, IRepository, IDisposable Implements IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.RepositoryBase-1.html": {
    "href": "api/CG.Business.Repositories.RepositoryBase-1.html",
    "title": "Class RepositoryBase<TOptions>",
    "keywords": "Class RepositoryBase<TOptions> This class represents a base implementation of the IRepository interface. Inheritance System.Object CG.DisposableBase RepositoryBase RepositoryBase<TOptions> Implements IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class RepositoryBase<TOptions> : RepositoryBase, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> Type Parameters Name Description TOptions The type of associated options. Constructors RepositoryBase(TOptions) This constructor creates a new instance of the RepositoryBase<TOptions> class. Declaration public RepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Properties Options This property contains options for the repository. Declaration protected TOptions Options { get; } Property Value Type Description TOptions Implements IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.RepositoryBase-2.html": {
    "href": "api/CG.Business.Repositories.RepositoryBase-2.html",
    "title": "Class RepositoryBase<TEntity, TModel>",
    "keywords": "Class RepositoryBase<TEntity, TModel> This class represents a base implementation of the IRepository interface. Inheritance System.Object CG.DisposableBase RepositoryBase RepositoryBase<TEntity, TModel> RepositoryBase<TOptions, TEntity, TModel> Implements IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class RepositoryBase<TEntity, TModel> : RepositoryBase, IRepository, IDisposable where TEntity : class where TModel : ModelBase Type Parameters Name Description TEntity The entity type associated with the repository. TModel The model type associated with the repository. Methods ToEntity(TModel) This method is called to convert a model to an entity. Declaration protected abstract TEntity ToEntity(TModel source) Parameters Type Name Description TModel source The object to be converted. Returns Type Description TEntity A converted entity. ToModel(TEntity) This method is called to convert an entity to a model. Declaration protected abstract TModel ToModel(TEntity source) Parameters Type Name Description TEntity source The object to be converted. Returns Type Description TModel A converted model. Implements IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.RepositoryBase-3.html": {
    "href": "api/CG.Business.Repositories.RepositoryBase-3.html",
    "title": "Class RepositoryBase<TOptions, TEntity, TModel>",
    "keywords": "Class RepositoryBase<TOptions, TEntity, TModel> This class represents a base implementation of the IRepository interface. Inheritance System.Object CG.DisposableBase RepositoryBase RepositoryBase <TEntity, TModel> RepositoryBase<TOptions, TEntity, TModel> Implements IRepository System.IDisposable Inherited Members RepositoryBase<TEntity, TModel>.ToEntity(TModel) RepositoryBase<TEntity, TModel>.ToModel(TEntity) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax public abstract class RepositoryBase<TOptions, TEntity, TModel> : RepositoryBase<TEntity, TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TEntity : class where TModel : ModelBase Type Parameters Name Description TOptions The type of associated options. TEntity The entity type associated with the repository. TModel The model type associated with the repository. Constructors RepositoryBase(TOptions) This constructor creates a new instance of the RepositoryBase<TOptions> class. Declaration public RepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Properties Options This property contains options for the manager. Declaration protected TOptions Options { get; } Property Value Type Description TOptions Implements IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.RepositoryException.html": {
    "href": "api/CG.Business.Repositories.RepositoryException.html",
    "title": "Class RepositoryException",
    "keywords": "Class RepositoryException This class represents a repository related exception. Inheritance System.Object System.Exception BusinessException RepositoryException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business.Repositories Assembly : CG.Business.dll Syntax [Serializable] public class RepositoryException : BusinessException, ISerializable Constructors RepositoryException() This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException() RepositoryException(SerializationInfo, StreamingContext) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. RepositoryException(String) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message) Parameters Type Name Description System.String message The message to use for the exception. RepositoryException(String, Exception) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Business.Services.html": {
    "href": "api/CG.Business.Services.html",
    "title": "Namespace CG.Business.Services",
    "keywords": "Namespace CG.Business.Services Classes ServiceBase This class represents a base implementation of the IService inteface. ServiceBase<TOptions> This class represents a base implementation of the IService interface. ServiceException This class represents a repository related exception. Interfaces IService This interface represents an object that performs automated tasks, responds to events, or listens for processing requests."
  },
  "api/CG.Business.Services.IService.html": {
    "href": "api/CG.Business.Services.IService.html",
    "title": "Interface IService",
    "keywords": "Interface IService This interface represents an object that performs automated tasks, responds to events, or listens for processing requests. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Services Assembly : CG.Business.dll Syntax public interface IService : IDisposable"
  },
  "api/CG.Business.Services.Options.html": {
    "href": "api/CG.Business.Services.Options.html",
    "title": "Namespace CG.Business.Services.Options",
    "keywords": "Namespace CG.Business.Services.Options Classes ServiceOptions This class represents configuration options for a service."
  },
  "api/CG.Business.Services.Options.ServiceOptions.html": {
    "href": "api/CG.Business.Services.Options.ServiceOptions.html",
    "title": "Class ServiceOptions",
    "keywords": "Class ServiceOptions This class represents configuration options for a service. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase ServiceOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Services.Options Assembly : CG.Business.dll Syntax public class ServiceOptions : OptionsBase, IValidatableObject Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Services.ServiceBase.html": {
    "href": "api/CG.Business.Services.ServiceBase.html",
    "title": "Class ServiceBase",
    "keywords": "Class ServiceBase This class represents a base implementation of the IService inteface. Inheritance System.Object CG.DisposableBase ServiceBase ServiceBase<TOptions> Implements IService System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Services Assembly : CG.Business.dll Syntax public abstract class ServiceBase : DisposableBase, IService, IDisposable Implements IService System.IDisposable"
  },
  "api/CG.Business.Services.ServiceBase-1.html": {
    "href": "api/CG.Business.Services.ServiceBase-1.html",
    "title": "Class ServiceBase<TOptions>",
    "keywords": "Class ServiceBase<TOptions> This class represents a base implementation of the IService interface. Inheritance System.Object CG.DisposableBase ServiceBase ServiceBase<TOptions> Implements IService System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Services Assembly : CG.Business.dll Syntax public abstract class ServiceBase<TOptions> : ServiceBase, IService, IDisposable where TOptions : ServiceOptions, new() Type Parameters Name Description TOptions The type of associated options. Constructors ServiceBase(IOptions<TOptions>) This constructor creates a new instance of the ServiceBase<TOptions> class. Declaration public ServiceBase(IOptions<TOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> options The options to use with the service. Properties Options This property contains options for the service. Declaration protected IOptions<TOptions> Options { get; } Property Value Type Description Microsoft.Extensions.Options.IOptions <TOptions> Implements IService System.IDisposable"
  },
  "api/CG.Business.Services.ServiceException.html": {
    "href": "api/CG.Business.Services.ServiceException.html",
    "title": "Class ServiceException",
    "keywords": "Class ServiceException This class represents a repository related exception. Inheritance System.Object System.Exception BusinessException ServiceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business.Services Assembly : CG.Business.dll Syntax [Serializable] public class ServiceException : BusinessException, ISerializable Constructors ServiceException() This constructor creates a new instance of the ServiceException class. Declaration public ServiceException() ServiceException(SerializationInfo, StreamingContext) This constructor creates a new instance of the ServiceException class. Declaration public ServiceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. ServiceException(String) This constructor creates a new instance of the ServiceException class. Declaration public ServiceException(string message) Parameters Type Name Description System.String message The message to use for the exception. ServiceException(String, Exception) This constructor creates a new instance of the ServiceException class. Declaration public ServiceException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Business.Stores.CrudStoreBase-3.html": {
    "href": "api/CG.Business.Stores.CrudStoreBase-3.html",
    "title": "Class CrudStoreBase<TModel, TKey, TRepository>",
    "keywords": "Class CrudStoreBase<TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase StoreBase CrudStoreBase<TModel, TKey, TRepository> CrudStoreBase<TOptions, TModel, TKey, TRepository> Implements ICrudStore <TModel, TKey> IStore System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public class CrudStoreBase<TModel, TKey, TRepository> : StoreBase, ICrudStore<TModel, TKey>, IStore, IDisposable where TModel : ModelBase<TKey> where TRepository : CrudRepositoryBase<TModel, TKey> Type Parameters Name Description TModel The model type associated with the repository. TKey The key type associated with the model. TRepository The type of associated repository. Constructors CrudStoreBase(TRepository) This constructor creates a new instance of the CrudStoreBase<TModel, TKey, TRepository> class. Declaration protected CrudStoreBase(TRepository repository) Parameters Type Name Description TRepository repository The repository to use with the store. Properties Repository This property contains a reference to a repository. Declaration protected TRepository Repository { get; } Property Value Type Description TRepository Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the store. Declaration public virtual Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object from the store.. Declaration public virtual IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the store. Declaration public virtual Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) This method updates a TModel in the store. Declaration public virtual Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudStore<TModel, TKey> IStore System.IDisposable"
  },
  "api/CG.Business.Stores.CrudStoreBase-4.html": {
    "href": "api/CG.Business.Stores.CrudStoreBase-4.html",
    "title": "Class CrudStoreBase<TOptions, TModel, TKey, TRepository>",
    "keywords": "Class CrudStoreBase<TOptions, TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase StoreBase CrudStoreBase <TModel, TKey, TRepository> CrudStoreBase<TOptions, TModel, TKey, TRepository> Implements ICrudStore <TModel, TKey> IStore System.IDisposable Inherited Members CrudStoreBase<TModel, TKey, TRepository>.Repository CrudStoreBase<TModel, TKey, TRepository>.AsQueryable() CrudStoreBase<TModel, TKey, TRepository>.AddAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.Dispose(Boolean) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public abstract class CrudStoreBase<TOptions, TModel, TKey, TRepository> : CrudStoreBase<TModel, TKey, TRepository>, ICrudStore<TModel, TKey>, IStore, IDisposable where TOptions : StoreOptions, new() where TModel : ModelBase<TKey> where TRepository : CrudRepositoryBase<TModel, TKey> Type Parameters Name Description TOptions The type of associated options. TModel The model type associated with the repository. TKey The key type associated with the model. TRepository The type of associated repository. Constructors CrudStoreBase(IOptions<TOptions>, TRepository) This constructor creates a new instance of the CrudStoreBase<TOptions, TModel, TKey, TRepository> class. Declaration protected CrudStoreBase(IOptions<TOptions> options, TRepository repository) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> options The options to use with the store. TRepository repository The repository to use with the store. Properties Options This property contains options for the manager. Declaration protected IOptions<TOptions> Options { get; } Property Value Type Description Microsoft.Extensions.Options.IOptions <TOptions> Implements ICrudStore<TModel, TKey> IStore System.IDisposable"
  },
  "api/CG.Business.Stores.html": {
    "href": "api/CG.Business.Stores.html",
    "title": "Namespace CG.Business.Stores",
    "keywords": "Namespace CG.Business.Stores Classes CrudStoreBase<TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. CrudStoreBase<TOptions, TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. StoreBase This class represents a base implementation of the IStore interface. StoreBase<TOptions> This class represents a base implementation of the IStore interface. StoreException This class represents a store related exception. Interfaces ICrudStore<TModel, TKey> This interface represents a store type that includes basic CRUD operations. IStore This interface represents an object that performs business operations on a specific type of data."
  },
  "api/CG.Business.Stores.ICrudStore-2.html": {
    "href": "api/CG.Business.Stores.ICrudStore-2.html",
    "title": "Interface ICrudStore<TModel, TKey>",
    "keywords": "Interface ICrudStore<TModel, TKey> This interface represents a store type that includes basic CRUD operations. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public interface ICrudStore<TModel, TKey> : IStore, IDisposable where TModel : ModelBase<TKey> Type Parameters Name Description TModel TKey Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the store. Declaration Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object from the store. Declaration IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the store. Declaration Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the store. Declaration Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object."
  },
  "api/CG.Business.Stores.IStore.html": {
    "href": "api/CG.Business.Stores.IStore.html",
    "title": "Interface IStore",
    "keywords": "Interface IStore This interface represents an object that performs business operations on a specific type of data. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public interface IStore : IDisposable"
  },
  "api/CG.Business.Stores.Options.html": {
    "href": "api/CG.Business.Stores.Options.html",
    "title": "Namespace CG.Business.Stores.Options",
    "keywords": "Namespace CG.Business.Stores.Options Classes StoreOptions This class represents configuration options for a store."
  },
  "api/CG.Business.Stores.Options.StoreOptions.html": {
    "href": "api/CG.Business.Stores.Options.StoreOptions.html",
    "title": "Class StoreOptions",
    "keywords": "Class StoreOptions This class represents configuration options for a store. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase StoreOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores.Options Assembly : CG.Business.dll Syntax public class StoreOptions : OptionsBase, IValidatableObject Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Stores.StoreBase.html": {
    "href": "api/CG.Business.Stores.StoreBase.html",
    "title": "Class StoreBase",
    "keywords": "Class StoreBase This class represents a base implementation of the IStore interface. Inheritance System.Object CG.DisposableBase StoreBase CrudStoreBase<TModel, TKey, TRepository> StoreBase<TOptions> Implements IStore System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public abstract class StoreBase : DisposableBase, IStore, IDisposable Implements IStore System.IDisposable"
  },
  "api/CG.Business.Stores.StoreBase-1.html": {
    "href": "api/CG.Business.Stores.StoreBase-1.html",
    "title": "Class StoreBase<TOptions>",
    "keywords": "Class StoreBase<TOptions> This class represents a base implementation of the IStore interface. Inheritance System.Object CG.DisposableBase StoreBase StoreBase<TOptions> Implements IStore System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax public abstract class StoreBase<TOptions> : StoreBase, IStore, IDisposable where TOptions : StoreOptions, new() Type Parameters Name Description TOptions The type of associated options. Constructors StoreBase(IOptions<TOptions>) This constructor creates a new instance of the StoreBase<TOptions> class. Declaration public StoreBase(IOptions<TOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> options The options to use with the store. Properties Options This property contains options for the manager. Declaration protected IOptions<TOptions> Options { get; } Property Value Type Description Microsoft.Extensions.Options.IOptions <TOptions> Implements IStore System.IDisposable"
  },
  "api/CG.Business.Stores.StoreException.html": {
    "href": "api/CG.Business.Stores.StoreException.html",
    "title": "Class StoreException",
    "keywords": "Class StoreException This class represents a store related exception. Inheritance System.Object System.Exception BusinessException StoreException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business.Stores Assembly : CG.Business.dll Syntax [Serializable] public class StoreException : BusinessException, ISerializable Constructors StoreException() This constructor creates a new instance of the StoreException class. Declaration public StoreException() StoreException(SerializationInfo, StreamingContext) This constructor creates a new instance of the StoreException class. Declaration public StoreException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. StoreException(String) This constructor creates a new instance of the StoreException class. Declaration public StoreException(string message) Parameters Type Name Description System.String message The message to use for the exception. StoreException(String, Exception) This constructor creates a new instance of the StoreException class. Declaration public StoreException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Business.Strategies.html": {
    "href": "api/CG.Business.Strategies.html",
    "title": "Namespace CG.Business.Strategies",
    "keywords": "Namespace CG.Business.Strategies Classes StrategyBase This class represents a base implementation of the IStrategy inteface. StrategyBase<TOptions> This class represents a base implementation of the IStrategy interface. Interfaces IStrategy This interface represents an object that enables selecting and algorithm at runtime."
  },
  "api/CG.Business.Strategies.IStrategy.html": {
    "href": "api/CG.Business.Strategies.IStrategy.html",
    "title": "Interface IStrategy",
    "keywords": "Interface IStrategy This interface represents an object that enables selecting and algorithm at runtime. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Strategies Assembly : CG.Business.dll Syntax public interface IStrategy : IDisposable"
  },
  "api/CG.Business.Strategies.Options.html": {
    "href": "api/CG.Business.Strategies.Options.html",
    "title": "Namespace CG.Business.Strategies.Options",
    "keywords": "Namespace CG.Business.Strategies.Options Classes StrategyOptions This class represents configuration options for a strategy."
  },
  "api/CG.Business.Strategies.Options.StrategyOptions.html": {
    "href": "api/CG.Business.Strategies.Options.StrategyOptions.html",
    "title": "Class StrategyOptions",
    "keywords": "Class StrategyOptions This class represents configuration options for a strategy. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase StrategyOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Strategies.Options Assembly : CG.Business.dll Syntax public class StrategyOptions : OptionsBase, IValidatableObject Fields SectionName This constant represents the configuration section root for strategy options. This means options for strategies should be bound at a point just above the Strategies node, in the configuration. Declaration public const string SectionName = \"Strategies\" Field Value Type Description System.String Properties Assembly This property contains the optional name of the assembly that contains the strategy. Declaration public string Assembly { get; set; } Property Value Type Description System.String Strategy This property contains the name of the configured strategy. Declaration [Required(ErrorMessageResourceName = \"StrategyOptions_Strategy\", ErrorMessageResourceType = typeof(Resources))] public string Strategy { get; set; } Property Value Type Description System.String Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Strategies.StrategyBase.html": {
    "href": "api/CG.Business.Strategies.StrategyBase.html",
    "title": "Class StrategyBase",
    "keywords": "Class StrategyBase This class represents a base implementation of the IStrategy inteface. Inheritance System.Object CG.DisposableBase StrategyBase StrategyBase<TOptions> Implements IStrategy System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Strategies Assembly : CG.Business.dll Syntax public abstract class StrategyBase : DisposableBase, IStrategy, IDisposable Implements IStrategy System.IDisposable"
  },
  "api/CG.Business.Strategies.StrategyBase-1.html": {
    "href": "api/CG.Business.Strategies.StrategyBase-1.html",
    "title": "Class StrategyBase<TOptions>",
    "keywords": "Class StrategyBase<TOptions> This class represents a base implementation of the IStrategy interface. Inheritance System.Object CG.DisposableBase StrategyBase StrategyBase<TOptions> Implements IStrategy System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Strategies Assembly : CG.Business.dll Syntax public abstract class StrategyBase<TOptions> : StrategyBase, IStrategy, IDisposable where TOptions : StrategyOptions, new() Type Parameters Name Description TOptions The type of associated options. Constructors StrategyBase(IOptions<TOptions>) This constructor creates a new instance of the StrategyBase<TOptions> class. Declaration public StrategyBase(IOptions<TOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> options The options to use with the strategy. Properties Options This property contains options for the strategy. Declaration protected IOptions<TOptions> Options { get; } Property Value Type Description Microsoft.Extensions.Options.IOptions <TOptions> Implements IStrategy System.IDisposable"
  },
  "api/CG.Business.Strategys.html": {
    "href": "api/CG.Business.Strategys.html",
    "title": "Namespace CG.Business.Strategys",
    "keywords": "Namespace CG.Business.Strategys Classes StrategyException This class represents a strategy related exception."
  },
  "api/CG.Business.Strategys.StrategyException.html": {
    "href": "api/CG.Business.Strategys.StrategyException.html",
    "title": "Class StrategyException",
    "keywords": "Class StrategyException This class represents a strategy related exception. Inheritance System.Object System.Exception BusinessException StrategyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Business.Strategys Assembly : CG.Business.dll Syntax [Serializable] public class StrategyException : BusinessException, ISerializable Constructors StrategyException() This constructor creates a new instance of the StrategyException class. Declaration public StrategyException() StrategyException(SerializationInfo, StreamingContext) This constructor creates a new instance of the StrategyException class. Declaration public StrategyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. StrategyException(String) This constructor creates a new instance of the StrategyException class. Declaration public StrategyException(string message) Parameters Type Name Description System.String message The message to use for the exception. StrategyException(String, Exception) This constructor creates a new instance of the StrategyException class. Declaration public StrategyException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Business.dll Syntax public static class ServiceCollectionExtensions Methods AddRepositories(IServiceCollection, IConfiguration, String, String) This method dynamically registers repository types, as configured in the specified configuration section. Declaration public static IServiceCollection AddRepositories(this IServiceCollection serviceCollection, IConfiguration configuration, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft*, System*, mscorlib, netstandard\") Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. System.String assemblyWhiteList An optional white list for filtering the list of assemblies that are searched during this operation. System.String assemblyBlackList An optional black list for filtering the list of assemblies that are searched during this operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection the value of the serviceCollection parameter, for chaining calls together. Remarks The idea, with this method, is to allow the caller to specify the concrete repository type(s) in the configuration. If configured to do so, this method will load an assembly in order to resolve the extension method(s) needed to register the repository types. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one ore more of the parameters is missing, or invalid. BusinessException This exception is thrown whenver the operation can't be completed. AddRepositories<TBuilder>(IServiceCollection, IConfiguration, String, String) This method dynamically registers repository types, as configured in the specified configuration section. This variant is intended to work with custom builders derived from the BuilderBase class. Declaration public static IServiceCollection AddRepositories<TBuilder>(this IServiceCollection serviceCollection, IConfiguration configuration, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft*, System*, mscorlib, netstandard\") where TBuilder : BuilderBase, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. System.String assemblyWhiteList An optional white list for filtering the list of assemblies that are searched during this operation. System.String assemblyBlackList An optional black list for filtering the list of assemblies that are searched during this operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection the value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TBuilder The type of builder to use for internal extension method search. Remarks The idea, with this method, is to allow the caller to specify the concrete repository type(s) in the configuration. If configured to do so, this method will load an assembly in order to resolve the extension method(s) needed to register the repository types. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one ore more of the parameters is missing, or invalid. BusinessException This exception is thrown whenver the operation can't be completed. AddStrategies(IServiceCollection, IConfiguration, String, String) This method dynamically registers strategy types, as configured in the specified configuration section. Declaration public static IServiceCollection AddStrategies(this IServiceCollection serviceCollection, IConfiguration configuration, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft*, System*, mscorlib, netstandard\") Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. System.String assemblyWhiteList An optional white list for filtering the list of assemblies that are searched during this operation. System.String assemblyBlackList An optional black list for filtering the list of assemblies that are searched during this operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection the value of the serviceCollection parameter, for chaining calls together. Remarks The idea, with this method, is to allow the caller to specify the concrete strategy type(s) in the configuration. If configured to do so, this method will load an assembly in order to resolve the extension method(s) needed to register the strategy types. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one ore more of the parameters is missing, or invalid. BusinessException This exception is thrown whenver the operation can't be completed. AddStrategies<TBuilder>(IServiceCollection, IConfiguration, String, String) This method dynamically registers strategy types, as configured in the specified configuration section. This variant is intended to work with custom builders derived from the BuilderBase class. Declaration public static IServiceCollection AddStrategies<TBuilder>(this IServiceCollection serviceCollection, IConfiguration configuration, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft*, System*, mscorlib, netstandard\") where TBuilder : BuilderBase, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. System.String assemblyWhiteList An optional white list for filtering the list of assemblies that are searched during this operation. System.String assemblyBlackList An optional black list for filtering the list of assemblies that are searched during this operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection the value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TBuilder The type of builder to use for internal extension method search. Remarks The idea, with this method, is to allow the caller to specify the concrete strategy type(s) in the configuration. If configured to do so, this method will load an assembly in order to resolve the extension method(s) needed to register the strategy types. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one ore more of the parameters is missing, or invalid. BusinessException This exception is thrown whenver the operation can't be completed."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Business.dll contains business abstractions used by other CodeGator packages."
  }
}